export default "#define GLSLIFY 1\n#define PI 3.141592653589793\n\nuniform vec3 uColor;\nuniform float uAlpha;\nuniform float uFadeRadius;\n\nvarying vec2 vUv;\n\nfloat sineInOut(float t)\n{\n    return - 0.5 * (cos(PI * t) - 1.0);\n}\n\nvoid main()\n{\n    float strength = 0.0;\n\n    if(vUv.x < uFadeRadius && vUv.y < uFadeRadius)\n    {\n        strength = clamp(1.0 - distance(vUv, vec2(uFadeRadius)) / uFadeRadius, 0.0, 1.0);\n    }\n\n    else if(vUv.x > 1.0 - uFadeRadius && vUv.y < uFadeRadius)\n    {\n        strength = clamp(1.0 - distance(vUv, vec2(1.0 - uFadeRadius, uFadeRadius)) / uFadeRadius, 0.0, 1.0);\n    }\n\n    else if(vUv.x > 1.0 - uFadeRadius && vUv.y > 1.0 - uFadeRadius)\n    {\n        strength = clamp(1.0 - distance(vUv, vec2(1.0 - uFadeRadius, 1.0 - uFadeRadius)) / uFadeRadius, 0.0, 1.0);\n    }\n\n    else if(vUv.x < uFadeRadius && vUv.y > 1.0 - uFadeRadius)\n    {\n        strength = clamp(1.0 - distance(vUv, vec2(uFadeRadius, 1.0 - uFadeRadius)) / uFadeRadius, 0.0, 1.0);\n    }\n\n    else\n    {\n        float xNeg = clamp(vUv.x / uFadeRadius, 0.0, 1.0);\n        float xPos = clamp((1.0 - vUv.x) / uFadeRadius, 0.0, 1.0);\n        float yNeg = clamp(vUv.y / uFadeRadius, 0.0, 1.0);\n        float yPos = clamp((1.0 - vUv.y) / uFadeRadius, 0.0, 1.0);\n\n        strength = xNeg * xPos * yNeg * yPos;\n    }\n\n    strength = sineInOut(strength);\n    strength *= uAlpha;\n\n    gl_FragColor = vec4(uColor, strength);\n}\n";